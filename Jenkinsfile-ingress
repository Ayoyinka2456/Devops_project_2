pipeline {
  agent any
  environment {
    IMAGE_ALIAS = "springboot"
    IMAGE_TAG = "1"
    AWS_DEFAULT_REGION = 'us-east-2'
  }

  stages {
    stage('Pre-cleanup') {
      steps {
        sh '''
          echo "üîÑ Attempting to delete existing Kubernetes resources and EKS cluster..."
      
          if command -v kubectl >/dev/null 2>&1; then
              echo "‚úÖ kubectl found. Checking for existing deployment..."
          
              if kubectl get deployment springboot >/dev/null 2>&1; then
                  echo "üóëÔ∏è Deleting existing deployment..."
                  kubectl delete -f deployment.yml
                  echo "‚è≥ Waiting for resources to fully terminate..."
                  sleep 300
              else
                  echo "‚ö†Ô∏è No existing deployment found. Skipping deletion and sleep."
              fi
          else
              echo "‚ÑπÔ∏è kubectl not installed. Skipping Kubernetes resource check and deletion."
          fi
      
          if command -v eksctl >/dev/null 2>&1; then
              echo "‚úÖ eksctl found. Checking for existing EKS cluster..."
          
              if eksctl get cluster --name demo-cluster --region ${AWS_DEFAULT_REGION} >/dev/null 2>&1; then
                  echo "üóëÔ∏è Cluster found. Deleting EKS cluster..."
                  eksctl delete cluster --name demo-cluster --region ${AWS_DEFAULT_REGION}
                  echo "‚è≥ Waiting for cluster deletion to complete..."
                  sleep 600
              else
                  echo "‚ö†Ô∏è No existing cluster found. Skipping deletion and sleep."
              fi
          else
              echo "‚ÑπÔ∏è eksctl not installed. Skipping EKS cluster deletion."
          fi
        '''
      }
    }

    stage('Checkout') {
      steps {
        echo "Cleaning workspace and preparing environment..."
        sh '''
          sudo yum -y install docker
          sudo systemctl start docker
          sudo systemctl enable docker
          sudo systemctl status docker --no-pager
          sudo rm -rf *
        '''
        git branch: 'feature-ingress', url: 'https://github.com/Ayoyinka2456/Devops_project_2.git'
      }
    }

    stage('Dockerize') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker_credential', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
          sh """
            sudo docker rmi ${DOCKERHUB_USER}/${IMAGE_ALIAS}:${IMAGE_TAG} || true
            sudo docker build -t ${DOCKERHUB_USER}/${IMAGE_ALIAS}:${IMAGE_TAG} .
            sudo docker login -u ${DOCKERHUB_USER} -p ${DOCKERHUB_PASS}
            sudo docker push ${DOCKERHUB_USER}/${IMAGE_ALIAS}:${IMAGE_TAG}
          """
        }
      }
    }

    stage('Deploy Container') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'docker_credential', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKERHUB_PASS')]) {
          sh """
            sudo docker container stop ${IMAGE_ALIAS} || true
            sudo docker container rm ${IMAGE_ALIAS} || true
            sudo docker run -itd -p 8080:8080 --name ${IMAGE_ALIAS} ${DOCKERHUB_USER}/${IMAGE_ALIAS}:${IMAGE_TAG}
            sudo docker ps
            echo "Spring Boot app is now accessible on port 9000."
          """
        }
      }
    }

    stage('Create EKS Cluster and Deploy App') {
      steps {
        withCredentials([usernamePassword(credentialsId: 'aws_creds', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
          sh """
            chmod +x install_tools.sh
            ./install_tools.sh
            aws configure set aws_access_key_id ${AWS_ACCESS_KEY_ID}
            aws configure set aws_secret_access_key ${AWS_SECRET_ACCESS_KEY}
            aws configure set region ${AWS_DEFAULT_REGION}
            aws configure set output json
            echo "Testing AWS credentials..."
            aws sts get-caller-identity || (echo '‚ùå Invalid AWS credentials' && exit 1)
          """
        }
      }
    }

    stage('Deploy to Kubernetes') {
      steps {
        sh 'kubectl apply -f deployment-ingress.yml && sleep 120'
      }
    }

    stage('Install Monitoring') {
      steps {
        sh '''
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update
          helm list | grep monitoring || helm install monitoring prometheus-community/kube-prometheus-stack -f prom-grafana.yaml
        '''
      }
    }

    stage('Wait for ALB') {
      steps {
        sh '''
          echo "Waiting for ALB Ingress to be ready..."
          sleep 180
          kubectl get ingress springboot-ingress -o jsonpath="{.status.loadBalancer.ingress[*].hostname}"
        '''
      }
    }

    stage('Access Dashboards') {
      steps {
        echo 'üî∏ Grafana Dashboard:'
        echo 'Visit: http://<ALB_HOSTNAME>/grafana'
        echo 'Username: admin'
        echo 'Password: admin'
        echo 'üî∏ Prometheus Dashboard:'
        echo 'Visit: http://<ALB_HOSTNAME>/prometheus'
      }
    }
  }
}
